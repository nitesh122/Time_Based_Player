{"ast":null,"code":"var _jsxFileName = \"/Users/maheshyadav/Desktop/Time_Based_Player/frontend/src/components/ConnectionStatus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { healthCheck } from '../services/api';\nimport './ConnectionStatus.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectionStatus = () => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isChecking, setIsChecking] = useState(true);\n  const [lastChecked, setLastChecked] = useState(null);\n  const checkConnection = async () => {\n    try {\n      setIsChecking(true);\n      await healthCheck();\n      setIsConnected(true);\n      setLastChecked(new Date());\n    } catch (error) {\n      console.error('Connection check failed:', error);\n      setIsConnected(false);\n      setLastChecked(new Date());\n    } finally {\n      setIsChecking(false);\n    }\n  };\n  useEffect(() => {\n    // Check connection on mount\n    checkConnection();\n\n    // Check connection every 30 seconds\n    const interval = setInterval(checkConnection, 30000);\n    return () => clearInterval(interval);\n  }, []);\n  const getStatusText = () => {\n    if (isChecking) return 'Checking connection...';\n    if (isConnected) return 'Connected to API';\n    return 'Disconnected from API';\n  };\n  const getStatusIcon = () => {\n    if (isChecking) return 'üîÑ';\n    if (isConnected) return '‚úÖ';\n    return '‚ùå';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `connection-status ${isConnected ? 'connected' : 'disconnected'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-indicator\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"status-icon\",\n        children: getStatusIcon()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"status-text\",\n        children: getStatusText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), lastChecked && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"last-checked\",\n      children: [\"Last checked: \", lastChecked.toLocaleTimeString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), !isConnected && !isChecking && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"retry-btn\",\n      onClick: checkConnection,\n      disabled: isChecking,\n      children: \"Retry Connection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(ConnectionStatus, \"PqbiCCYjqs1ZdgKltclxMczcfog=\");\n_c = ConnectionStatus;\nexport default ConnectionStatus;\nvar _c;\n$RefreshReg$(_c, \"ConnectionStatus\");","map":{"version":3,"names":["React","useState","useEffect","healthCheck","jsxDEV","_jsxDEV","ConnectionStatus","_s","isConnected","setIsConnected","isChecking","setIsChecking","lastChecked","setLastChecked","checkConnection","Date","error","console","interval","setInterval","clearInterval","getStatusText","getStatusIcon","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleTimeString","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/maheshyadav/Desktop/Time_Based_Player/frontend/src/components/ConnectionStatus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { healthCheck } from '../services/api';\nimport './ConnectionStatus.css';\n\nconst ConnectionStatus = () => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isChecking, setIsChecking] = useState(true);\n  const [lastChecked, setLastChecked] = useState(null);\n\n  const checkConnection = async () => {\n    try {\n      setIsChecking(true);\n      await healthCheck();\n      setIsConnected(true);\n      setLastChecked(new Date());\n    } catch (error) {\n      console.error('Connection check failed:', error);\n      setIsConnected(false);\n      setLastChecked(new Date());\n    } finally {\n      setIsChecking(false);\n    }\n  };\n\n  useEffect(() => {\n    // Check connection on mount\n    checkConnection();\n    \n    // Check connection every 30 seconds\n    const interval = setInterval(checkConnection, 30000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  const getStatusText = () => {\n    if (isChecking) return 'Checking connection...';\n    if (isConnected) return 'Connected to API';\n    return 'Disconnected from API';\n  };\n\n  const getStatusIcon = () => {\n    if (isChecking) return 'üîÑ';\n    if (isConnected) return '‚úÖ';\n    return '‚ùå';\n  };\n\n  return (\n    <div className={`connection-status ${isConnected ? 'connected' : 'disconnected'}`}>\n      <div className=\"status-indicator\">\n        <span className=\"status-icon\">{getStatusIcon()}</span>\n        <span className=\"status-text\">{getStatusText()}</span>\n      </div>\n      {lastChecked && (\n        <div className=\"last-checked\">\n          Last checked: {lastChecked.toLocaleTimeString()}\n        </div>\n      )}\n      {!isConnected && !isChecking && (\n        <button \n          className=\"retry-btn\"\n          onClick={checkConnection}\n          disabled={isChecking}\n        >\n          Retry Connection\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default ConnectionStatus;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}