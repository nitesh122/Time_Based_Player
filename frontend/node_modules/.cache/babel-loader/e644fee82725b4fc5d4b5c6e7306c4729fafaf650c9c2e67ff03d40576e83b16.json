{"ast":null,"code":"// Get current time in HH:MM format\nexport const getCurrentTime = () => {\n  const now = new Date();\n  return now.toTimeString().slice(0, 5);\n};\n\n// Get current time block (1-6)\nexport const getCurrentTimeBlock = () => {\n  const now = new Date();\n  const hour = now.getHours();\n  if (hour >= 0 && hour < 4) return 1; // 00:00-03:59\n  if (hour >= 4 && hour < 8) return 2; // 04:00-07:59\n  if (hour >= 8 && hour < 12) return 3; // 08:00-11:59\n  if (hour >= 12 && hour < 16) return 4; // 12:00-15:59\n  if (hour >= 16 && hour < 20) return 5; // 16:00-19:59\n  if (hour >= 20 && hour < 24) return 6; // 20:00-23:59\n\n  return 1; // Default fallback\n};\n\n// Get time until next block change\nexport const getTimeUntilNextBlock = () => {\n  const now = new Date();\n  const currentBlock = getCurrentTimeBlock();\n  const hour = now.getHours();\n  let nextBlockHour;\n  switch (currentBlock) {\n    case 1:\n      nextBlockHour = 4;\n      break;\n    case 2:\n      nextBlockHour = 8;\n      break;\n    case 3:\n      nextBlockHour = 12;\n      break;\n    case 4:\n      nextBlockHour = 16;\n      break;\n    case 5:\n      nextBlockHour = 20;\n      break;\n    case 6:\n      nextBlockHour = 24;\n      break;\n    default:\n      nextBlockHour = 4;\n  }\n  const nextBlockTime = new Date(now);\n  nextBlockTime.setHours(nextBlockHour, 0, 0, 0);\n  if (nextBlockHour === 24) {\n    nextBlockTime.setDate(nextBlockTime.getDate() + 1);\n    nextBlockTime.setHours(0, 0, 0, 0);\n  }\n  return nextBlockTime.getTime() - now.getTime();\n};\n\n// Format time remaining\nexport const formatTimeRemaining = milliseconds => {\n  const hours = Math.floor(milliseconds / (1000 * 60 * 60));\n  const minutes = Math.floor(milliseconds % (1000 * 60 * 60) / (1000 * 60));\n  const seconds = Math.floor(milliseconds % (1000 * 60) / 1000);\n  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n};\n\n// Get block name\nexport const getBlockName = blockId => {\n  const blockNames = {\n    1: 'Midnight Chill',\n    2: 'Sunrise Calm',\n    3: 'Morning Energy',\n    4: 'Afternoon Focus',\n    5: 'Evening Relax',\n    6: 'Night Vibes'\n  };\n  return blockNames[blockId] || 'Unknown Block';\n};\n\n// Get block description\nexport const getBlockDescription = blockId => {\n  const descriptions = {\n    1: 'Relaxing music for late night',\n    2: 'Peaceful morning vibes',\n    3: 'Upbeat music to start the day',\n    4: 'Productive midday music',\n    5: 'Wind down after work',\n    6: 'Late evening atmosphere'\n  };\n  return descriptions[blockId] || 'Music for this time of day';\n};","map":{"version":3,"names":["getCurrentTime","now","Date","toTimeString","slice","getCurrentTimeBlock","hour","getHours","getTimeUntilNextBlock","currentBlock","nextBlockHour","nextBlockTime","setHours","setDate","getDate","getTime","formatTimeRemaining","milliseconds","hours","Math","floor","minutes","seconds","toString","padStart","getBlockName","blockId","blockNames","getBlockDescription","descriptions"],"sources":["/Users/maheshyadav/Desktop/Time_Based_Player/frontend/src/utils/timeUtils.js"],"sourcesContent":["// Get current time in HH:MM format\nexport const getCurrentTime = () => {\n  const now = new Date();\n  return now.toTimeString().slice(0, 5);\n};\n\n// Get current time block (1-6)\nexport const getCurrentTimeBlock = () => {\n  const now = new Date();\n  const hour = now.getHours();\n  \n  if (hour >= 0 && hour < 4) return 1;   // 00:00-03:59\n  if (hour >= 4 && hour < 8) return 2;   // 04:00-07:59\n  if (hour >= 8 && hour < 12) return 3;  // 08:00-11:59\n  if (hour >= 12 && hour < 16) return 4; // 12:00-15:59\n  if (hour >= 16 && hour < 20) return 5; // 16:00-19:59\n  if (hour >= 20 && hour < 24) return 6; // 20:00-23:59\n  \n  return 1; // Default fallback\n};\n\n// Get time until next block change\nexport const getTimeUntilNextBlock = () => {\n  const now = new Date();\n  const currentBlock = getCurrentTimeBlock();\n  const hour = now.getHours();\n  \n  let nextBlockHour;\n  switch (currentBlock) {\n    case 1: nextBlockHour = 4; break;\n    case 2: nextBlockHour = 8; break;\n    case 3: nextBlockHour = 12; break;\n    case 4: nextBlockHour = 16; break;\n    case 5: nextBlockHour = 20; break;\n    case 6: nextBlockHour = 24; break;\n    default: nextBlockHour = 4;\n  }\n  \n  const nextBlockTime = new Date(now);\n  nextBlockTime.setHours(nextBlockHour, 0, 0, 0);\n  \n  if (nextBlockHour === 24) {\n    nextBlockTime.setDate(nextBlockTime.getDate() + 1);\n    nextBlockTime.setHours(0, 0, 0, 0);\n  }\n  \n  return nextBlockTime.getTime() - now.getTime();\n};\n\n// Format time remaining\nexport const formatTimeRemaining = (milliseconds) => {\n  const hours = Math.floor(milliseconds / (1000 * 60 * 60));\n  const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));\n  const seconds = Math.floor((milliseconds % (1000 * 60)) / 1000);\n  \n  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n};\n\n// Get block name\nexport const getBlockName = (blockId) => {\n  const blockNames = {\n    1: 'Midnight Chill',\n    2: 'Sunrise Calm', \n    3: 'Morning Energy',\n    4: 'Afternoon Focus',\n    5: 'Evening Relax',\n    6: 'Night Vibes'\n  };\n  return blockNames[blockId] || 'Unknown Block';\n};\n\n// Get block description\nexport const getBlockDescription = (blockId) => {\n  const descriptions = {\n    1: 'Relaxing music for late night',\n    2: 'Peaceful morning vibes',\n    3: 'Upbeat music to start the day',\n    4: 'Productive midday music',\n    5: 'Wind down after work',\n    6: 'Late evening atmosphere'\n  };\n  return descriptions[blockId] || 'Music for this time of day';\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}